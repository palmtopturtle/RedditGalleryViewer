{"version":3,"sources":["components/searchform/searchinput/SearchInput.js","components/searchform/SearchForm.js","components/gallery/post/Post.js","components/gallery/Gallery.js","components/tagsdisplay/TagsDisplay.js","components/footer/loader/Loader.js","components/footer/Footer.js","components/logo/Logo.js","components/App.js","serviceWorker.js","index.js","components/logo/logo.module.scss","components/searchform/searchinput/searchinput.module.scss","components/tagsdisplay/tagsdisplay.module.scss","components/footer/footer.module.scss","components/gallery/gallery.module.scss","components/footer/loader/loader.module.scss","components/gallery/post/post.module.scss","components/searchform/searchform.module.scss"],"names":["SearchInput","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleTextChange","e","setState","defineProperty","target","name","value","state","_this2","submitData","react_default","a","createElement","className","styles","search","box","type","onChange","onKeyPress","key","preventDefault","onClick","children","Component","SearchForm","handleSelectChange","updateSelect","renderSelects","tagsLength","select","sortBy","disabled","limit","_this$props","addTag","setSubreddit","subreddit","warning","searchinput_SearchInput","SPANMIN","SPANMAX","Post","getValidPreview","preview","post","images","resolutions","find","item","width","height","source","truncateText","text","charLimit","truncated","indexOf","substring","renderBody","body","href","url","src","alt","title","selftext","reactHtmlParser","selftext_html","renderTitle","concat","permalink","renderMeta","localDate","Date","created_utc","author","toLocaleDateString","score","num_comments","span","Math","floor","random","dimensions","gridItem","getBoundingClientRect","ref","style","gridRowEnd","padding","Gallery","posts","gallery","map","post_Post","TagsDisplay","renderTags","tags","deleteTag","tag","Loader","web","items","keys","trail","from","transform","opacity","enter","square","Footer","renderError","error","message","response","status","renderFooter","isLoading","reachedEnd","fetchPosts","loader_Loader","btn","footer","Logo","header","logo","start","letter","config","stiff","to","empty","delay","slow","BASE_URL","defaultState","after","Search","newTag","includes","resetDefaultState","toConsumableArray","tagToDelete","filter","newSubreddit","axios","get","outputUrl","then","res","newPosts","data","catch","urlStart","length","outputTags","join","logo_Logo","searchform_SearchForm","tagsdisplay_TagsDisplay","gallery_Gallery","footer_Footer","Boolean","window","location","hostname","match","ReactDOM","render","App","document","getElementById","navigator","serviceWorker","ready","registration","unregister","module","exports","flip","btn-add","btn-frontpage","tags-container","fade","post-image","post-info","post-meta","search-form","input-container","select-container"],"mappings":"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","file":"static/js/main.00aed3c6.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport styles from \"./searchinput.module.scss\";\r\n\r\nclass SearchInput extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      value: \"\"\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Grabs data from text input and updates the state.\r\n   * @param {event} e\r\n   */\r\n  handleTextChange = e => {\r\n    this.setState({ [e.target.name]: e.target.value });\r\n  };\r\n\r\n  render() {\r\n    //Props determine whether the subreddit or tags are updated.\r\n    const { submitData } = this.props;\r\n    return (\r\n      <div className={styles.search}>\r\n        <input\r\n          className={styles.box}\r\n          type=\"text\"\r\n          name=\"value\"\r\n          value={this.state.value}\r\n          onChange={this.handleTextChange}\r\n          onKeyPress={e => {\r\n            if (e.key === \"Enter\") {\r\n              e.preventDefault();\r\n              submitData(this.state.value);\r\n              this.setState({ value: \"\" });\r\n            }\r\n          }}\r\n        />\r\n        <button\r\n          className={styles[\"btn-add\"]}\r\n          type=\"button\"\r\n          onClick={() => {\r\n            submitData(this.state.value);\r\n            this.setState({ value: \"\" });\r\n          }}\r\n        >\r\n          {this.props.children}\r\n        </button>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default SearchInput;\r\n","import React, { Component } from \"react\";\r\nimport SearchInput from \"./searchinput/SearchInput\";\r\nimport styles from \"./searchform.module.scss\";\r\n\r\nclass SearchForm extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      sortBy: \"\",\r\n      limit: 25\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Ensures that the visual state of the select input matches what is passed through updateSelect.\r\n   * @param {event} e\r\n   */\r\n  handleSelectChange = e => {\r\n    this.setState({ [e.target.name]: e.target.value });\r\n    this.props.updateSelect(e);\r\n  };\r\n\r\n  /**\r\n   * Outputs the select inputs for post limiting and sorting.\r\n   */\r\n  renderSelects = () => {\r\n    const { tagsLength } = this.props;\r\n    return (\r\n      <div className={styles[\"select-container\"]}>\r\n        Sort by:\r\n        <select\r\n          className={styles.select}\r\n          name=\"sortBy\"\r\n          value={this.state.sortBy}\r\n          onChange={this.handleSelectChange}\r\n          disabled={tagsLength > 0 ? false : true}\r\n        >\r\n          <option value=\"relevance\">Relevance</option>\r\n          <option value=\"top\">Top</option>\r\n          <option value=\"new\">New</option>\r\n          <option value=\"comments\">Comments</option>\r\n        </select>\r\n        Limit:\r\n        <select\r\n          className={styles.select}\r\n          name=\"limit\"\r\n          value={this.state.limit}\r\n          onChange={this.handleSelectChange}\r\n        >\r\n          <option value={10}>10</option>\r\n          <option value={25}>25</option>\r\n          <option value={50}>50</option>\r\n        </select>\r\n      </div>\r\n    );\r\n  };\r\n\r\n  render() {\r\n    const { addTag, setSubreddit, subreddit, warning } = this.props;\r\n    return (\r\n      <form className={styles[\"search-form\"]}>\r\n        <div className={styles[\"input-container\"]}>\r\n          <SearchInput submitData={setSubreddit}>Go To Subreddit</SearchInput>\r\n          <SearchInput submitData={addTag}>Add Tag</SearchInput>\r\n        </div>\r\n        {warning ? <div className={styles.warning}>{warning}</div> : null}\r\n        <div className={styles.subreddit}>Currently browsing: <span>{subreddit ? subreddit : \"Frontpage\"}</span></div>\r\n        {this.renderSelects()}\r\n      </form>\r\n    );\r\n  }\r\n}\r\n\r\nexport default SearchForm;\r\n","import React, { Component } from \"react\";\r\nimport reactHtmlParser from \"react-html-parser\";\r\nimport styles from \"./post.module.scss\";\r\n\r\nconst SPANMIN = 11,\r\n  SPANMAX = 13;\r\n\r\nclass Post extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      span: Math.floor(Math.random() * (SPANMAX - SPANMIN + 1)) + SPANMIN,\r\n      width: 0,\r\n      height: 0\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Get width and height of tile when component mounts.\r\n   */\r\n  componentDidMount() {\r\n    let dimensions = this.gridItem.getBoundingClientRect();\r\n    this.setState({ width: dimensions.width, height: dimensions.height });\r\n  }\r\n\r\n  /**\r\n   * Loop through the preview images and find one where the width and height are greater than the tile's.\r\n   * If none are found, just use the original image instead.\r\n   */\r\n  getValidPreview = () => {\r\n    let preview = this.props.post.preview.images[0].resolutions.find(item => {\r\n      return item.width >= this.state.width && item.height >= this.state.height;\r\n    });\r\n\r\n    return preview ? preview : this.props.post.preview.images[0].source;\r\n  };\r\n\r\n  /**\r\n   * Returns a string truncated to the specified character limit. Keeps words intact.\r\n   * @param {string} text\r\n   * @param {number} charLimit\r\n   */\r\n  truncateText = (text, charLimit) => {\r\n    let truncated = text.indexOf(\" \", charLimit);\r\n    if (truncated === -1) return text;\r\n    return text.substring(0, truncated) + \" ...\";\r\n  };\r\n\r\n  /**\r\n   * Outputs the main body. Differs depending on whether a preview is detected.\r\n   */\r\n  renderBody = () => {\r\n    const { post } = this.props;\r\n\r\n    return (\r\n      <div className={styles.body}>\r\n        {post.preview ? (\r\n          <a\r\n            className={styles[\"post-image\"]}\r\n            href={post.url}\r\n            target=\"_blank noopener noreferrer\"\r\n          >\r\n            <img src={this.getValidPreview().url} alt={post.title} />\r\n          </a>\r\n        ) : (\r\n          <div className={styles.selftext}>\r\n            {reactHtmlParser(post.selftext_html)}\r\n          </div>\r\n        )}\r\n      </div>\r\n    );\r\n  };\r\n\r\n  /**\r\n   * Outputs the title.\r\n   */\r\n  renderTitle = () => {\r\n    const { post } = this.props;\r\n\r\n    return (\r\n      <a\r\n        className={styles.title}\r\n        href={`https://reddit.com${post.permalink}`}\r\n        target=\"_blank noopener noreferrer\"\r\n      >\r\n        <h3>{this.truncateText(post.title, 100)}</h3>\r\n      </a>\r\n    );\r\n  };\r\n\r\n  /**\r\n   * Outputs the meta data relevant to the post.\r\n   * * subreddit\r\n   * * author\r\n   * * date\r\n   * * score\r\n   * * comments\r\n   */\r\n  renderMeta = () => {\r\n    const { post } = this.props;\r\n    let localDate = new Date(post.created_utc * 1000);\r\n\r\n    return (\r\n      <div className={styles[\"post-meta\"]}>\r\n        <a\r\n          href={`https://reddit.com/r/${post.subreddit}`}\r\n          target=\"_blank noopener noreferrer\"\r\n        >\r\n          r/{post.subreddit}\r\n        </a>{\" \"}\r\n        - posted by {post.author} on {localDate.toLocaleDateString()} -{\" \"}\r\n        {post.score} points -{\" \"}\r\n        <a\r\n          href={`https://reddit.com${post.permalink}`}\r\n          target=\"_blank noopener noreferrer\"\r\n        >\r\n          {post.num_comments} comments\r\n        </a>\r\n      </div>\r\n    );\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div\r\n        ref={gridItem => (this.gridItem = gridItem)}\r\n        className={styles.post}\r\n        style={{ gridRowEnd: `span ${this.state.span}` }}\r\n      >\r\n        {this.renderBody()}\r\n        <div className={styles[\"post-info\"]}>\r\n          <div className={styles.padding}>\r\n            {this.renderTitle()}\r\n            {this.renderMeta()}\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Post;\r\n","import React, { Component } from \"react\";\r\nimport Post from \"./post/Post\";\r\nimport styles from \"./gallery.module.scss\";\r\n\r\nclass Gallery extends Component {\r\n  render() {\r\n    const { posts } = this.props;\r\n\r\n    return (\r\n      <div className={styles.gallery}>\r\n        {posts.map(post => (\r\n          <Post key={posts.indexOf(post)} post={post} />\r\n        ))}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Gallery;\r\n","import React, { Component } from \"react\";\r\nimport styles from \"./tagsdisplay.module.scss\";\r\n\r\nclass TagsDisplay extends Component {\r\n  renderTags = () => {\r\n    const { tags, deleteTag } = this.props;\r\n\r\n    return tags.map(tag => (\r\n      <div className={styles.tag} key={tag}>\r\n        {tag}{\" \"}\r\n        <i className=\"material-icons\" onClick={() => deleteTag(tag)}>\r\n          remove_circle\r\n        </i>\r\n      </div>\r\n    ));\r\n  };\r\n\r\n  render() {\r\n    const { tags } = this.props;\r\n    \r\n    return (\r\n      <div className={styles[\"tags-container\"]}>\r\n        {tags ? this.renderTags() : null}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default TagsDisplay;\r\n","import React from \"react\";\r\nimport { Transition } from \"react-spring\";\r\nimport styles from \"./loader.module.scss\";\r\n\r\nconst Loader = () => {\r\n  const squares = [\r\n    { text: \"Lo\", key: 1 },\r\n    { text: \"ad\", key: 2 },\r\n    { text: \"in\", key: 3 },\r\n    { text: \"g...\", key: 4 }\r\n  ];\r\n\r\n  return (\r\n    <Transition\r\n      items={squares}\r\n      keys={item => item.key}\r\n      trail={30}\r\n      from={{ transform: \"rotateY(0deg)\", opacity: 0 }}\r\n      enter={{ transform: \"rotateY(360deg)\", opacity: 1 }}\r\n    >\r\n      {item => props => (\r\n        <div style={props} className={styles.square}>\r\n          <span>{item.text}</span>\r\n        </div>\r\n      )}\r\n    </Transition>\r\n  );\r\n};\r\n\r\nexport default Loader;\r\n","import React, { Component } from \"react\";\r\nimport styles from \"./footer.module.scss\";\r\nimport Loader from \"./loader/Loader\"\r\n\r\nclass Footer extends Component {\r\n  /**\r\n   * Handles errors when fetching data, if any occur.\r\n   */\r\n  renderError = () => {\r\n    const { error } = this.props;\r\n    if (error.message === \"Network Error\" || error.response.status === 404) {\r\n      return (\r\n        <h2>\r\n          Error: 404 not found! Did you type the subreddit name correctly?\r\n        </h2>\r\n      );\r\n    } else {\r\n      return <h2>An error occured while fetching data! Is reddit.com down?</h2>;\r\n    }\r\n  };\r\n\r\n  /**\r\n   * Displays different information depending on the props.\r\n   * * isLoading ? shows \"Loading...\" animation\r\n   * * reachedEnd ? informs the user that there are no more posts to load\r\n   * * error ? runs through error handling\r\n   * * else, displays \"Load More\" button\r\n   */\r\n  renderFooter = () => {\r\n    const { isLoading, error, reachedEnd, fetchPosts } = this.props;\r\n    if (isLoading) {\r\n      return <Loader />;\r\n    } else if (reachedEnd) {\r\n      return <h2>Reached end!</h2>;\r\n    } else if (error) {\r\n      return this.renderError();\r\n    } else {\r\n      return (\r\n        <button\r\n          className={styles.btn}\r\n          type=\"button\"\r\n          name=\"loadMore\"\r\n          onClick={fetchPosts}\r\n        >\r\n          Load More\r\n        </button>\r\n      );\r\n    }\r\n  };\r\n\r\n  render() {\r\n    return <div className={styles.footer}>{this.renderFooter()}</div>;\r\n  }\r\n}\r\n\r\nexport default Footer;\r\n","import React from \"react\";\r\nimport styles from \"./logo.module.scss\";\r\nimport { Trail, config } from \"react-spring\";\r\n\r\nconst Logo = () => {\r\n  const squares = [\r\n      { text: \"Gall ery\", key: 1 },\r\n      { text: \"\", key: 2 },\r\n      { text: \"\", key: 3 },\r\n      { text: \"Vie wer\", key: 4 }\r\n    ],\r\n    title = [\r\n      { letter: \"R\", key: 1 },\r\n      { letter: \"e\", key: 2 },\r\n      { letter: \"d\", key: 3 },\r\n      { letter: \"d\", key: 4 },\r\n      { letter: \"i\", key: 5 },\r\n      { letter: \"t\", key: 6 }\r\n    ];\r\n\r\n  return (\r\n    <div className={styles.header}>\r\n      <div className={styles.logo}>\r\n        <div className={styles.start}>\r\n          <Trail\r\n            items={title}\r\n            keys={item => item.key}\r\n            config={config.stiff}\r\n            from={{ transform: \"translateX(-50px)\", opacity: 0 }}\r\n            to={{ transform: \"translateX(0)\", opacity: 1 }}\r\n          >\r\n            {item => props => <span style={props}>{item.letter}</span>}\r\n          </Trail>\r\n        </div>\r\n        <div className={styles.empty} />\r\n        <Trail\r\n          items={squares}\r\n          keys={item => item.key}\r\n          delay={1100}\r\n          config={config.slow}\r\n          from={{ transform: \"rotateY(0deg)\", opacity: 0 }}\r\n          to={{ transform: \"rotateY(360deg)\", opacity: 1 }}\r\n        >\r\n          {item => props => (\r\n            <div style={props} className={styles.square}>\r\n              {item.text ? <span>{item.text}</span> : null}\r\n            </div>\r\n          )}\r\n        </Trail>\r\n        <div className={styles.empty} />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Logo;\r\n","import React, { Component } from \"react\";\r\nimport axios from \"axios\";\r\nimport SearchForm from \"./searchform/SearchForm\";\r\nimport Gallery from \"./gallery/Gallery\";\r\nimport TagsDisplay from \"./tagsdisplay/TagsDisplay\";\r\nimport Footer from \"./footer/Footer\";\r\nimport Logo from \"./logo/Logo\";\r\nimport \"./app.module.scss\";\r\n\r\nconst BASE_URL = \"https://www.reddit.com/\";\r\n\r\n//Used for reloading posts when inputs are updated.\r\nconst defaultState = {\r\n  posts: [],\r\n  after: \"\",\r\n  reachedEnd: false,\r\n  error: null,\r\n  warning: \"\"\r\n};\r\n\r\nclass Search extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      subreddit: \"\",\r\n      sortBy: \"relevance\",\r\n      limit: 25,\r\n      after: \"\",\r\n      tags: [],\r\n      posts: [],\r\n      reachedEnd: false,\r\n      isLoading: false,\r\n      error: null,\r\n      warning: \"\"\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.fetchPosts();\r\n  }\r\n\r\n  resetDefaultState() {\r\n    this.setState(defaultState);\r\n  }\r\n\r\n  /**\r\n   * Appends a tag to the current array and updates the posts.\r\n   * @param {string} newTag\r\n   */\r\n  addTag = newTag => {\r\n    if (!newTag) {\r\n      this.setState({ warning: \"Please enter some text first!\" });\r\n    } else if (this.state.tags.includes(newTag)) {\r\n      this.setState({ warning: \"Duplicate tag detected!\" });\r\n    } else {\r\n      this.resetDefaultState();\r\n      this.setState({ tags: [...this.state.tags, newTag] }, this.fetchPosts);\r\n    }\r\n  };\r\n\r\n  /**\r\n   * Removes a tag from the current array and updates the posts.\r\n   * @param {string} tagToDelete\r\n   */\r\n  deleteTag = tagToDelete => {\r\n    this.resetDefaultState();\r\n    this.setState(\r\n      { tags: this.state.tags.filter(tag => tag !== tagToDelete) },\r\n      this.fetchPosts\r\n    );\r\n  };\r\n\r\n  /**\r\n   * Changes the current subreddit and updates the posts.\r\n   * A blank subreddit returns to the frontpage.\r\n   * @param {string} newSubreddit\r\n   */\r\n  setSubreddit = newSubreddit => {\r\n    this.resetDefaultState();\r\n    this.setState(\r\n      { subreddit: newSubreddit ? \"r/\" + newSubreddit + \"/\" : \"\" },\r\n      this.fetchPosts\r\n    );\r\n  };\r\n\r\n  /**\r\n   * Updates either the post limit per load or how the posts are sorted, and then updates the posts.\r\n   * @param {event} e\r\n   */\r\n  updateSelect = e => {\r\n    this.resetDefaultState();\r\n    this.setState({ [e.target.name]: e.target.value }, this.fetchPosts);\r\n  };\r\n\r\n  /**\r\n   * Fetches posts from reddit. What posts are fetched depends on the current subreddit and tags.\r\n   * The \"after\" property from the JSON is for pagination.\r\n   */\r\n  fetchPosts = () => {\r\n    this.setState({ isLoading: true });\r\n    axios\r\n      .get(this.outputUrl())\r\n      .then(res => {\r\n        let newPosts = res.data.data.children.map(data => data.data),\r\n          after = res.data.data.after;\r\n\r\n        this.setState({\r\n          posts: this.state.posts.concat(newPosts),\r\n          after,\r\n          isLoading: false,\r\n          reachedEnd: !after ? true : false\r\n        });\r\n      })\r\n      .catch(error => this.setState({ error, isLoading: false }));\r\n  };\r\n\r\n  /**\r\n   * Builds the URL string for fetching data from the Reddit API.\r\n   * If there are no tags, it just uses the \"hot\" category.\r\n   */\r\n  outputUrl = () => {\r\n    let urlStart = BASE_URL + this.state.subreddit;\r\n\r\n    if (this.state.tags.length > 0) {\r\n      return `${urlStart}search.json?q=${this.outputTags()}&limit=${\r\n        this.state.limit\r\n      }&sort=${this.state.sortBy}&restrict_sr=on&raw_json=1&after=${\r\n        this.state.after\r\n      }`;\r\n    }\r\n\r\n    return `${urlStart}hot.json?limit=${\r\n      this.state.limit\r\n    }&restrict_sr=on&raw_json=1&after=${this.state.after}`;\r\n  };\r\n\r\n  /**\r\n   * Outputs the current tags for use in the API URL.\r\n   */\r\n  outputTags = () => {\r\n    return this.state.tags.join(\"+\");\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <Logo />\r\n        <SearchForm\r\n          updateSelect={this.updateSelect}\r\n          tagsLength={this.state.tags.length}\r\n          addTag={this.addTag}\r\n          setSubreddit={this.setSubreddit}\r\n          subreddit={this.state.subreddit}\r\n          warning={this.state.warning}\r\n        />\r\n        <TagsDisplay tags={this.state.tags} deleteTag={this.deleteTag} />\r\n        <Gallery posts={this.state.posts} />\r\n        <Footer\r\n          isLoading={this.state.isLoading}\r\n          error={this.state.error}\r\n          reachedEnd={this.state.reachedEnd}\r\n          fetchPosts={this.fetchPosts}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Search;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from \"./components/App\"\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"logo_header__2GhC-\",\"logo\":\"logo_logo__2oDYV\",\"start\":\"logo_start__26rB1\",\"square\":\"logo_square__3A1gT\",\"empty\":\"logo_empty__UiaUI\",\"flip\":\"logo_flip__2kFdW\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"search\":\"searchinput_search__27h_G\",\"box\":\"searchinput_box__1V77T\",\"btn-add\":\"searchinput_btn-add__38TXZ\",\"btn-frontpage\":\"searchinput_btn-frontpage__37hRF\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"tags-container\":\"tagsdisplay_tags-container__BD71S\",\"tag\":\"tagsdisplay_tag__27vhs\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"footer\":\"footer_footer__23_xh\",\"btn\":\"footer_btn__3811J\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"gallery\":\"gallery_gallery__BcCCB\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"square\":\"loader_square__12v44\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"post\":\"post_post__3DIaG\",\"fade\":\"post_fade__gjdLl\",\"body\":\"post_body__3ta-A\",\"post-image\":\"post_post-image__12cAz\",\"selftext\":\"post_selftext__1UX7Q\",\"post-info\":\"post_post-info__3soBC\",\"padding\":\"post_padding__1fiIs\",\"title\":\"post_title__1ilu_\",\"post-meta\":\"post_post-meta__s1FO2\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"search-form\":\"searchform_search-form__1G27x\",\"warning\":\"searchform_warning__Y1ZTr\",\"input-container\":\"searchform_input-container__37Qab\",\"subreddit\":\"searchform_subreddit__3CZ6q\",\"select-container\":\"searchform_select-container__2HREv\",\"select\":\"searchform_select__2FyYn\"};"],"sourceRoot":""}